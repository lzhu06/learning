               __2.Intermediate Python for DS__
********************************************************************
Visualization / Data Structure / Control Structures / Case Study
********************************************************************
【0】Loading Packages: Matplotlib: import matplotlib.pyplot as plt
【1】Histogram: Distribution w/ bins (number of data point in each bins)
    plt.hist(dataset,bins = #)
    plt.show()
    plt.clf() -> cleans it up again so you can start fresh.
【2】Basic Plot
      a.line plot: plt.yticks used to name points in the graphic
**********************************************************************
                            Dictionary
**********************************************************************
【LIST】- Not convenient & not intuitive; 
【DICTIONARY】: very fast in huge dataset 
       world = {y1:x1,y2:x2,y3:x3}
       world[y1] -> output: x1    | dict_name[key] -> result: value  
       Note: key have to be "immutable" objects.
       del(dict_name[key]) - reomove from dictionary 
 【LIST VS DICTIONARY】: 
  1. List: Select, update and remove:[];
        indexed by range of numbers;
        collection of values order matters select entire subsets 
  2. Dictionary: 
        Select, update and remove:[];
        indexed by unique keys;
        Lookup table with unique keys; 
  3. Add value to dictionary: dic_name[new key] = new value;
  ************************************************************************
                Pandas: High level data manipulation tool
  ************************************************************************
  Pandas Pakcages : tabular datset 
  2D Numpy array: only accept one data type. 
  1. import pandas as pd
     dataset_name = pd.DataFrame(dict)
  2. from CSV file 
     dataset_name = pd.read_csv("paht/xx/xxx.csv", index_col = 0)
  3. Index & select data
          i. Square brackets; -> limited functionality with fully column access but row access only via slicing example: dataset_name[1:4]
          ii. Adv methods: 
            loc: row access with fully row access dataset_name.loc[["","",""]], also coloumn rows same time.
            ioc:dataset_name.iloc[[rows number],[columns number]]
     Column access [] -> dataset_name["column_name"] -> type of this is seriers. 
     Row acces [] -> dataset_name[#:#]
      a. loc: dataset_name.loc["xx"]  -> vertical 
      b. loc: dataset_name.loc[["xx"]] -> horizontal 
  4. Boolean Operators: and, or, not  & np.logical_and, np.logical_or, np.logical_not
              Note: not has a higher priority than and & or, it is executed first.
  5. Filtering Pandas DataFrame
  ***************************************************************************
                                if-elif-else statment 
  ***************************************************************************
                        while loop = repeated if statement 
  ****************************************************************************
                                       for loop
  ****************************************************************************
  enumerate: 
  
  Dictionary:for key, val in my_dict.items():
  Numpy array: for val in np.nditer(my_array):
  ******************************************************************************
  Loop data structure - Part 2
  ******************************************************************************
  iterrows 
  
  ******************************************************************************
                             Hacker Statistics
 ******************************************************************************
  1. Random Generators
      np.random.rand() & np.random.seed()
      Note: pseudo-random creates same random number if it's same seed.
    [Example-1]:Coin Toss
                import numpy as np
                np.random.seed(123)
                coin = np.random.randint(0,2) - Randomly generate 0 or 1.
                print(coin)
  2. Random Walk
          random_walk = [0]
          for x in range(100) :
              step = random_walk[-1]
              dice = np.random.randint(1,7)
              if dice <= 2:
                  step = step - 1
              elif dice <= 5:
                  step = step + 1
             else:
                 step = step + np.random.randint(1,7)
             random_walk.append(step)
           print(random_walk)
******************************************************************************
                                  Distribution
******************************************************************************
CASE: Simulate multiple walks
  # Numpy is imported; seed is set

# Initialize all_walks (don't change this line)
all_walks = []

# Simulate random walk 10 times
for i in range(10) :

    # Code from before
    random_walk = [0]
    for x in range(100) :
        step = random_walk[-1]
        dice = np.random.randint(1,7)

        if dice <= 2:
            step = max(0, step - 1)
        elif dice <= 5:
            step = step + 1
        else:
            step = step + np.random.randint(1,7)
        random_walk.append(step)

    # Append random_walk to all_walks
    all_walks.append(random_walk)

# Print all_walks
print(all_walks)

