               __2.Intermediate Python for DS__
********************************************************************
Visualization / Data Structure / Control Structures / Case Study
********************************************************************
【0】Loading Packages: Matplotlib: import matplotlib.pyplot as plt
【1】Histogram: Distribution w/ bins (number of data point in each bins)
    plt.hist(dataset,bins = #)
    plt.show()
    plt.clf() -> cleans it up again so you can start fresh.
【2】Basic Plot
      a.line plot: plt.yticks used to name points in the graphic
**********************************************************************
                            Dictionary
**********************************************************************
【LIST】- Not convenient & not intuitive; 
【DICTIONARY】: very fast in huge dataset 
       world = {y1:x1,y2:x2,y3:x3}
       world[y1] -> output: x1    | dict_name[key] -> result: value  
       Note: key have to be "immutable" objects.
       del(dict_name[key]) - reomove from dictionary 
 【LIST VS DICTIONARY】: 
  1. List: Select, update and remove:[];
        indexed by range of numbers;
        collection of values order matters select entire subsets 
  2. Dictionary: 
        Select, update and remove:[];
        indexed by unique keys;
        Lookup table with unique keys; 
  3. Add value to dictionary: dic_name[new key] = new value;
  ************************************************************************
                Pandas: High level data manipulation tool
  ************************************************************************
  Pandas Pakcages : tabular datset 
  2D Numpy array: only accept one data type. 
  1. import pandas as pd
     dataset_name = pd.DataFrame(dict)
  2. from CSV file 
     dataset_name = pd.read_csv("paht/xx/xxx.csv", index_col = 0)
  3. Index & select data
          i. Square brackets; -> limited functionality with fully column access but row access only via slicing example: dataset_name[1:4]
          ii. Adv methods: 
            loc: row access with fully row access dataset_name.loc[["","",""]], also coloumn rows same time.
            ioc:dataset_name.iloc[[rows number],[columns number]]
     Column access [] -> dataset_name["column_name"] -> type of this is seriers. 
     Row acces [] -> dataset_name[#:#]
      a. loc: dataset_name.loc["xx"]  -> vertical 
      b. loc: dataset_name.loc[["xx"]] -> horizontal 
  4. Boolean Operators: and, or, not  & np.logical_and, np.logical_or, np.logical_not
              Note: not has a higher priority than and & or, it is executed first.
  5. Filtering Pandas DataFrame
  ***************************************************************************
          if-elif-else statment & while loop = repeated if statement 
  ***************************************************************************
  
  
              
